{
  "_args": [
    [
      {
        "raw": "express-api",
        "scope": null,
        "escapedName": "express-api",
        "name": "express-api",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/sayedn/projects/nasihere/barcode-scanner-api"
    ]
  ],
  "_from": "express-api@latest",
  "_id": "express-api@0.1.0",
  "_inCache": true,
  "_location": "/express-api",
  "_npmUser": {
    "name": "mgutz",
    "email": "mario@mgutz.com"
  },
  "_npmVersion": "1.4.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "express-api",
    "scope": null,
    "escapedName": "express-api",
    "name": "express-api",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "http://registry.npmjs.org/express-api/-/express-api-0.1.0.tgz",
  "_shasum": "e9ab0011b45d5e909bcf3eb0711c9021d3763bf2",
  "_shrinkwrap": null,
  "_spec": "express-api",
  "_where": "/Users/sayedn/projects/nasihere/barcode-scanner-api",
  "author": "",
  "dependencies": {
    "cson-safe": "^0.1.1",
    "js-yaml": "^3.0.2",
    "lodash": "^2.4.1",
    "serve-static": "^1.2.3"
  },
  "description": "Express-api is an API framework based on Swagger.",
  "devDependencies": {
    "express": "^4.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "e9ab0011b45d5e909bcf3eb0711c9021d3763bf2",
    "tarball": "https://registry.npmjs.org/express-api/-/express-api-0.1.0.tgz"
  },
  "keywords": [
    "swagger",
    "express",
    "api",
    "resource"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mgutz",
      "email": "mario@mgutz.com"
    }
  ],
  "name": "express-api",
  "optionalDependencies": {},
  "peerDependencies": {
    "express": "4.x"
  },
  "readme": "# express-api\n\nExpress-api is an API framework based on Swagger.\n\nExpress-api uses CSON, JSON or YAML files to expose your apis using the\neapiger specs. Express-eapi reloads schemas in development facilitating schema\ncreation.\n\nDO NOT USE, WIP! Documentation is inaccurate.\n\n## Using\n\nInstall the library\n\n    npm install express-api\n\nCreate resource listings schema and resource schema files in a common\ndirectory, eg `public/api/docs`. Here are the official examples\n\n- [petstore resource listing](http://petstore.eapiger.wordnik.com/api/api-docs)\n- [petstore resource](http://petstore.eapiger.wordnik.com/api/api-docs/pet)\n\nImplement your resource API. NOTE, the name of your resoure methods must match\nthe `nickname` property in the schema operations\n\n```\n//// pet.json\napis: [{\n  path: \"/pet/{petId}\",\n  operations: [{\n    summary: \"Find pet by ID\",\n    nickname: \"getPetById\",\n   }]\n}]\n```\n\n```\n//// resource/pet.js\nexports.getPetById = function(req, res) {\n}\n```\n\nWire it all up\n\n```\nvar express = require('express');\nvar app = express();\nvar Swag = require('express-eapi');\n\n// create routers for API and docs\nvar apiRouter = express.Router();\nvar docsRouter = epxress.Router();\napp.use('/api', apiRouter);\napp.use('/api/api-docs', docsRouter);\n\nvar eapi = new Swag({\n  apiRouter: apiRouter,\n  docsRouter: docsRouter,\n  docsDir: 'public/api/docs',\n  extname: '.json'\n});\n\neapi\n  .addApi('pet.json', require('./resources/pet.js'))\n  .addApi('user.json', require('./resources/user.js'))\n  .configureDocs('index.json', 'http://localhost:8000/api');\n\napp.listen(3000);\n```\n\nBrowser your json schemas at `http://localhost:3000/api/api-docs` or\nthrough the eapiger UI.\n\n## Middleware\n\nThe primary reason for creating express-api is the lack of support for\nplain middleware in other frameworks.\n\nThe implementation method can either be a function or array of functions.\n\n    exports.getPetById = function(req, res, next) { ... };\n\n    exports.getPetById = [\n      validationMiddleware({ body: {id: joi.integer()}}),\n      function(req, res, next) { ... };\n    ];\n\nThat can be a bit tedious. Express-api can use middleware as plugins. Let's\ncreate one.\n\n    function validate(req, res, next) {\n      // get the spec for the current operation\n      var spec = req.__eapiger.operation;\n      var params = spec.parameters;\n      params.forEach(function(param) {\n        if (param.required && param.paramType === 'path')  {\n          if (!req.params[param.name]) res.send(400, 'Require argument missing' + param.name);\n        }\n      });\n\n      next();\n    }\n\nTo use it\n\n    eapi\n      .use(validate)\n      .addApi('pet.json', require('./resources/pet.js'))\n\nThe position matters. All middleware used before `addApi` are applied before\na operation method in the pipeline. Post filters look like this.\n\n    eapi\n      .addApi('pet.json', require('./resources/pet.js'))\n      .use(normalizeResult);\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.1.0"
}
